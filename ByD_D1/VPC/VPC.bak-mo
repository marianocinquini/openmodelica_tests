within ByD_D1.VPC;

model VPC

  parameter String vpc_prop_maps_fname = "ByD_D1/Data/vpc_prop_maps.mat";
  parameter String vpc_brake_maps_fname = "ByD_D1/Data/vpc_brake_maps.mat";

  VPC_prop Vpc_prop(SoC_min = 0.1,brk_mech_map_fname = vpc_prop_maps_fname, friction_coeff_map_fname = vpc_prop_maps_fname, max_whl_trq_fname = vpc_prop_maps_fname, trq_pwr_elec_fname = vpc_prop_maps_fname)  annotation(
    Placement(visible = true, transformation(origin = {-28.1112, 117.852}, extent = {{-68.4224, -32.7942}, {68.4224, 32.7942}}, rotation = 0)));
  VPC_brake Vpc_brake(vpc_brake_maps_fname = vpc_brake_maps_fname)  annotation(
    Placement(visible = true, transformation(origin = {-26, -74}, extent = {{-56, -56}, {56, 56}}, rotation = 0)));
  ByD_D1.VPC.VPC_merge Vpc_merge annotation(
    Placement(visible = true, transformation(origin = {97.94, 58.0603}, extent = {{-20.9397, -20.9397}, {20.9397, 20.9397}}, rotation = 0)));
  Modelica.Blocks.Discrete.UnitDelay Delay4 annotation(
    Placement(visible = true, transformation(origin = {140, 58}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
  Modelica.Blocks.Discrete.UnitDelay unitDelay annotation(
    Placement(visible = true, transformation(origin = {100, -52}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
  ByD_D1.Buses.vpc_powertrain_bus_in vpc_powertrain_bus_in annotation(
    Placement(visible = true, transformation(origin = {-257, -94}, extent = {{-37, -32}, {37, 32}}, rotation = 0), iconTransformation(origin = {2, 156}, extent = {{-39, -39}, {39, 39}}, rotation = 0)));
  ByD_D1.Buses.vpc_bus_out vpc_bus_out annotation(
    Placement(visible = true, transformation(origin = {132, -96}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {2, -156}, extent = {{-36, -38}, {36, 38}}, rotation = 0)));
  ByD_D1.Buses.vpc_drv_bus_in vpc_drv_bus_in annotation(
    Placement(visible = true, transformation(origin = {-108, 34}, extent = {{-28, -30}, {28, 30}}, rotation = 0), iconTransformation(origin = {-160, -2}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
equation
  connect(Vpc_brake.vpc_mot_trq_dmd_simu, Vpc_merge.mot_brk_dmd) annotation(
    Line(points = {{33, -96}, {52, -96}, {52, 41}, {75, 41}}, color = {0, 0, 127}));
  connect(Vpc_prop.mot_trq_dmd, Vpc_merge.mot_prop_dmd) annotation(
    Line(points = {{43, 118}, {62, 118}, {62, 75}, {75, 75}}, color = {0, 0, 127}));
  connect(Vpc_brake.vpc_brk_trq_dmd_simu, unitDelay.u) annotation(
    Line(points = {{34, -52}, {90, -52}}, color = {0, 0, 127}));
  connect(Vpc_merge.mot_trq_dmd_switch, Delay4.u) annotation(
    Line(points = {{120, 58}, {130, 58}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.ess_ctrl_pwr_max_reg, Vpc_brake.ess_ctrl_pwr_max_reg_simu) annotation(
    Line(points = {{-257, -94}, {-156, -94}, {-156, -120}, {-84, -120}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.accelec_pwr_dmd, Vpc_brake.accelec_plant_pwr_simu) annotation(
    Line(points = {{-256, -94}, {-150, -94}, {-150, -106}, {-84, -106}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.mot_cstr_trq_max_neg, Vpc_brake.mot_ctrl_cstr_trq_max_neg_simu) annotation(
    Line(points = {{-256, -94}, {-148, -94}, {-148, -90}, {-84, -90}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.mot_spd_out, Vpc_brake.mot_plant_spd_out_simu) annotation(
    Line(points = {{-256, -94}, {-152, -94}, {-152, -74}, {-84, -74}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.ess_plant_soc_simu, Vpc_brake.ess_plant_soc_simu) annotation(
    Line(points = {{-256, -94}, {-156, -94}, {-156, -58}, {-84, -58}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.chas_lin_spd_out_simu, Vpc_brake.chas_plant_lin_spd_out_simu) annotation(
    Line(points = {{-256, -94}, {-158, -94}, {-158, -42}, {-84, -42}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.ess_plant_soc_simu, Vpc_prop.ess_plant_soc) annotation(
    Line(points = {{-256, -94}, {-242, -94}, {-242, 88}, {-102, 88}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.accelec_pwr_dmd, Vpc_prop.acc_elec_pwr_dmd) annotation(
    Line(points = {{-256, -94}, {-244, -94}, {-244, 96}, {-102, 96}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.mot_spd_out, Vpc_prop.mot_plant_spd_out) annotation(
    Line(points = {{-256, -94}, {-248, -94}, {-248, 104}, {-102, 104}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.mot_cstr_trq_max_pos, Vpc_prop.cstr_trq_max_pos) annotation(
    Line(points = {{-256, -94}, {-250, -94}, {-250, 110}, {-102, 110}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.ess_ctrl_pwr_max_prop, Vpc_prop.ess_ctrl_pwr_max) annotation(
    Line(points = {{-256, -94}, {-258, -94}, {-258, 126}, {-102, 126}}, color = {0, 0, 127}));
  connect(vpc_powertrain_bus_in.chas_lin_spd_out_simu, Vpc_prop.chas_lin_spd) annotation(
    Line(points = {{-256, -94}, {-270, -94}, {-270, 148}, {-102, 148}}, color = {0, 0, 127}));
  connect(unitDelay.y, vpc_bus_out.vpc_brk_trq_dmd_simu) annotation(
    Line(points = {{108, -52}, {132, -52}, {132, -96}}, color = {0, 0, 127}));
  connect(Delay4.y, vpc_bus_out.vpc_mot_trq_dmd_simu) annotation(
    Line(points = {{148, 58}, {148, -96}, {132, -96}}, color = {0, 0, 127}));
  connect(vpc_drv_bus_in.drv_brk_cmd, Vpc_prop.brk_cmd) annotation(
    Line(points = {{-108, 34}, {-114, 34}, {-114, 132}, {-102, 132}}, color = {0, 0, 127}));
  connect(vpc_drv_bus_in.drv_brk_cmd, Vpc_brake.drv_brk_dmd_simu) annotation(
    Line(points = {{-108, 34}, {-102, 34}, {-102, -26}, {-84, -26}}, color = {0, 0, 127}));
  connect(vpc_drv_bus_in.trq_dmd, Vpc_merge.drv_trq_dmd) annotation(
    Line(points = {{-108, 34}, {26, 34}, {26, 58}, {74, 58}}, color = {0, 0, 127}));
  connect(vpc_drv_bus_in.drv_acc_cmd, Vpc_prop.acc_cmd) annotation(
    Line(points = {{-108, 34}, {-130, 34}, {-130, 140}, {-102, 140}}, color = {0, 0, 127}));
  annotation(
    uses(Modelica(version = "4.0.0")),
    Diagram(coordinateSystem(extent = {{-160, -160}, {160, 160}})),
    Icon(coordinateSystem(extent = {{-160, -160}, {160, 160}}), graphics = {Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-160, 160}, {160, -160}}), Bitmap(origin = {-2, 9}, rotation = 180, extent = {{-152, 149}, {152, -149}}, imageSource = "")}),
    version = "");
end VPC;
